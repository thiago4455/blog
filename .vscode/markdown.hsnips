global
function math(context) {
    return context.scopes.some(s => s.includes("meta.math")
        || s.includes("meta.embedded.math") || s.includes("math.inline"));
}

endglobal

snippet newpage "Create a new markdown page"
+++
title = "$1"
+++

#### $2
endsnippet

context !math(context)
snippet eq bA
\begin{equation*}
    $0
\end{equation*}
endsnippet

context !math(context)
snippet en bA
\begin{equation}
    $0
\end{equation}
endsnippet

context !math(context)
snippet al bA
\begin{align*}
    $0
\end{align*}
endsnippet

context !math(context)
snippet an bA
\begin{align}
    $0
\end{align}
endsnippet

context !math(context)
snippet ll wA
\$$1\$``rv=[" ",",",".","-","?"].includes(t[1][0])?"":" "``$2
endsnippet


context !math(context)
snippet LL wA
\$\$
    $0
\$\$
endsnippet

context math(context)
snippet beg "begin{} | end{}" bA
\begin{$1}
    $0
\end{``rv=t[0]``}
endsnippet

context math(context)
snippet `(\\\\)?begi?n?` "begin{} | end{}"
\begin{$1}
    $0
\end{``rv=t[0]``}
endsnippet

# begin | end values
context math(context)
snippet `(?<={)al?i?g?n?` "align"
align
endsnippet

context math(context)
snippet `(?<={)eq?u?a?t?i?o?n?` "equation"
equation
endsnippet

context math(context)
snippet `(?<={)(b|p)?ma?t?r?i?x?` "matrix"
``rv=['b','p'].includes(m[0][0])?m[0][0]:''``matrix
endsnippet

context math(context)
snippet matrix
\begin{matrix}
    $1
\end{matrix}
endsnippet

context math(context)
snippet bmatrix
\begin{bmatrix}
    $1
\end{bmatrix}
endsnippet

context math(context)
snippet pmatrix
\begin{pmatrix}
    $1
\end{pmatrix}
endsnippet

context math(context)
snippet `([A-Za-z])(\d)` "auto subscript" wA
``rv=m[1]+'_'+m[2]``
endsnippet

context math(context)
snippet `([A-Za-z])_(\d\d)` "auto subscript2" wA
``rv=m[1]+'_{'+m[2]+'}'``
endsnippet

context math(context)
snippet `(\w)__` "auto subscript3" A
_{$1}
endsnippet

context math(context)
snippet `(?<=\S)ao` "auto superscript" A
^{$1}
endsnippet

context math(context)
snippet // "Fraction" iA
\\frac{$1}{$2}
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction" A
\\frac{``rv=m[1]``}{$1}
endsnippet


context math(context)
snippet `^.*\)/` "() Fraction" A
``
let stripped = m[0].substring(0,m[0].length-1)
let depth = 0
i = stripped.length-1
while (true){
    if (stripped[i] == ')')
        depth = depth+ 1;
    if (stripped[i] == '(')
        depth = depth - 1;
    if (depth == 0)
        break;
    i = i- 1;
}
rv = stripped.substring(0,i)+"\\frac{"+stripped.substring(i+1,stripped.length-1) + "}"
``
endsnippet

priority 10
context math(context)
snippet bar "bar" A
\overline{$1}$0
endsnippet

context math(context)
priority 100
snippet `([a-zA-Z])bar` "bar" A
\overline{``rv=m[1]``}
endsnippet

context math(context)
priority 10
snippet hat "hat" A
\hat{$1}$0
endsnippet

context math(context)
priority 100
snippet `([a-zA-Z])hat` "hat" A
\hat{``rv=m[1]``}
endsnippet

context math(context)
snippet `(\\?\w+)(,\.|\.,)` "Vector postfix" A
\vec{``rv=m[1]``}
endsnippet 

context math(context)
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${3:n} \end{pmatrix}
endsnippet


context math(context)
snippet lambda "lambda" i
\\lambda
endsnippet

context math(context)
snippet ooo "infinity" i
\\infty
endsnippet

context math(context)
snippet `->` "to" iA
\\to
endsnippet

context math(context)
snippet lim "lim" w
\\lim_{n \\to ${1:\infty}} 
endsnippet

context math(context)
snippet sum "lim" w
\\sum+{n=1}^{${1:\infty}} 
endsnippet

priority 200
context math(context)
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context math(context)
snippet tt "text" iA
\text{$1}$0
endsnippet

snippet `\<(.*?)\|` "bra" A
\bra{``rv=m[1].replace('q', '\\psi').replace('f', '\\phi')``}
endsnippet

snippet `\|(.*?)\>` "ket" A
\ket{``rv=m[1].replace('q', '\\psi').replace('f', '\\phi')``}
endsnippet

snippet `(.*)\\bra{(.*?)}([^\|]*?)\>` "braket" A
``rv=m[1]``\braket{``rv=m[2]``}{``rv=m[3].replace('q', '\\psi').replace('f', '\\phi')``}
endsnippet

priority 200
context math(context)
snippet `(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)` "ln" A
\\``rv=m[1]``
endsnippet


context math(context)
snippet xx "cross" iA
\times 
endsnippet

priority 100
context math(context)
snippet ** "cdot" iA
\cdot 
endsnippet

context math(context)
snippet <= "leq" iA
\le 
endsnippet

context math(context)
snippet >= "geq" iA
\ge 
endsnippet

context math(context)
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context math(context)
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context math(context)
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet


context math(context)
snippet transpose "transpose" w
$1^{T}
endsnippet

context math(context)
snippet `(?<=\S)tra?n?s?p?o?s?e?` "transpose" 
^{T}
endsnippet


context math(context)
snippet transpose "conjulgate transpose" w
$1^{\dagger}
endsnippet

context math(context)
snippet `(?<=\S)ctr?a?n?s?p?o?s?e?` "conjulgate transpose" 
^{\dagger}
endsnippet

context math(context)
snippet lr "left | right" i
\left$1 $0 \right$2
endsnippet

context math(context)
snippet != "not equals" iA
\neq 
endsnippet

context math(context)
snippet => "implies" i
\implies 
endsnippet

context math(context)
snippet =< "implied by" i
\impliedby 
endsnippet

context math(context)
snippet iff "iff" Ai
\iff 
endsnippet

context math(context)
snippet ... "ldots" iA
\ldots 
endsnippet